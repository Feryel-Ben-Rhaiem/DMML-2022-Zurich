# -*- coding: utf-8 -*-
"""ModelsFunctions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MXFVhLyCtZQCZiZqXpBMj0fh4TsH7zx3
"""

# Commented out IPython magic to ensure Python compatibility.
# Import required packages 
# %matplotlib inline
import pandas as pd 
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, precision_score, recall_score, f1_score
import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style("whitegrid") 

# Get the baseline
def get_baseline_accuracy(X, y):
    from sklearn.dummy import DummyClassifier
    dummy = DummyClassifier(strategy='most_frequent')
    dummy.fit(X, y)
    baseline = dummy.score(X, y)
    return baseline

# Plot confusion matrix 
def plot_confusion_matrix(y_test, y_pred):
    conf_mat = confusion_matrix(y_test, y_pred)
    fig, ax = plt.subplots(figsize=(7,7))
    ax.set_title('Confusion Matrix')
    sns.heatmap(conf_mat, annot=True, fmt='d')
    plt.ylabel('Actual')
    plt.xlabel('Predicted')
    plt.show()

# Show erroneous predictions
def get_errors(y_test, y_pred, X_test):
    y_pred_df = pd.DataFrame(y_pred)
    y_pred_df.columns = ['difficulty_num']
    y_test_df = pd.DataFrame(y_test)
    X_test_df = pd.DataFrame(X_test)
    erro = []
    for i in range(len(y_test)):
        if y_test_df['difficulty_num'].iloc[i] != y_pred_df['difficulty_num'].iloc[i]:
            erro.append(X_test_df.iloc[i]['sentence'])
    erro_df = pd.DataFrame(erro)
    erro_df.columns = ['erroneous sentences']
    return erro_df

# Predicting on the unlabeled data
def make_predictions(df_pred, model):
    pred = df_pred
    pred['difficulty'] = model.predict(pred['sentence'])  
    for i in range(len(pred)):
        if pred['difficulty'].iloc[i] == 1:
            pred['difficulty'].iloc[i] = 'A1'
        if pred['difficulty'].iloc[i] == 2:
            pred['difficulty'].iloc[i] = 'A2'
        if pred['difficulty'].iloc[i] == 3:
            pred['difficulty'].iloc[i] = 'B1'
        if pred['difficulty'].iloc[i] == 4:
            pred['difficulty'].iloc[i] = 'B2'
        if pred['difficulty'].iloc[i] == 5:
            pred['difficulty'].iloc[i] = 'C1'
        if pred['difficulty'].iloc[i] == 6:
            pred['difficulty'].iloc[i] = 'C2'
    return pred